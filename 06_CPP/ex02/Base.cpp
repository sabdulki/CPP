/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   Base.cpp                                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: sabdulki <sabdulki@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/10/17 18:07:43 by sabdulki          #+#    #+#             */
/*   Updated: 2024/11/04 14:19:12 by sabdulki         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "Base.hpp"
#include "A.hpp"
#include "B.hpp"
#include "C.hpp"

Base::~Base()
{
	std::cout << "Base destructor called\n";
}

/* It randomly instanciates A, B or C and returns the instance as a Base pointer. 
Feel free to use anything you like for the random choice implementation. */
Base* generate(void)
{
	Base* base;
	int random;

	/*srand to initialize the random number generator with a unique seed (current time) 
	so that the random numbers generated by std::rand() are different each time you run the program.*/
	std::srand(static_cast<unsigned>(time(0)));
	random = rand() % 3;
	if (random == 0)
		base = new A();
	else if (random == 1)
		base = new B();
	else 
		base = new C();
	std::cout << "Randomly generated an object\n";
	return (base);
}

void identify(Base* p)
{
	/*If the cast succeeds (i.e., dynamic_cast returns a non-null pointer), 
	it means p is pointing to an object of that type, and the corresponding type is printed.*/
	/*In the pointer version, dynamic_cast always returns nullptr if the cast fails*/
	std::cout << "Going to identify an object via pointer\n";

	A* aPtr = dynamic_cast<A*>(p);
	B* bPtr = dynamic_cast<B*>(p);
	C* cPtr = dynamic_cast<C*>(p);
	if (aPtr != nullptr)
		std::cout << "Actual type is: A\n";
	else if (bPtr != nullptr)
		std::cout << "Actual type is: B\n";
	else if (cPtr != nullptr)
		std::cout << "Actual type is: C\n";
	else
		std::cout << "invalid inherited class\n";
	return ;
}

void identify(Base& p)
{
	/*Since the function uses a reference, you cannot check for nullptr or directly work with pointers.*/
	std::cout << "Going to identify an object via reference\n";

	try 
	{
		A& aPtr = dynamic_cast<A&>(p);
		(void)aPtr;
		std::cout << "Actual type is: A\n";
	}
	catch (std::bad_cast) {}
	try 
	{
		B& bPtr = dynamic_cast<B&>(p);
		(void)bPtr;
		std::cout << "Actual type is: B\n";
	}
	catch(std::bad_cast) {}
	try 
	{
		C& cPtr = dynamic_cast<C&>(p);
		(void)cPtr;
		std::cout << "Actual type is: C\n";
	}
	catch(std::bad_cast) {}
	return ;
}
